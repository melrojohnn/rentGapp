name: Deploy to LocalStack

on:
  workflow_run:
    workflows: ["Test and Build"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t rentapp:latest .

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: rentapp:latest

    - name: Install AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install

    - name: Configure AWS CLI for LocalStack
      run: |
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set default.region us-east-1
        aws configure set default.output json

    - name: Start LocalStack
      run: |
        pip install localstack
        localstack start -d

    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until aws --endpoint-url=http://localhost:4566 sts get-caller-identity; do sleep 2; done'

    - name: Deploy infrastructure with Terraform
      run: |
        cd terraform
        terraform init
        terraform apply -auto-approve

    - name: Start application containers
      run: |
        docker-compose up -d postgres redis
        sleep 10
        docker-compose up -d rentapp

    - name: Wait for application startup
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8081/actuator/health; do sleep 5; done'

    - name: Test application endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8081/actuator/health

        # Test login endpoint
        curl -X POST http://localhost:8081/v1/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"admin@example.com","password":"admin123"}' || echo "Login test failed"

    - name: Cleanup
      if: always()
      run: |
        docker-compose down
        localstack stop
